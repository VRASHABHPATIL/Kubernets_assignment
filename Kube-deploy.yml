trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  awsRegion: 'us-east-1'
  clusterName: 'KubernetsPractice'
  ecrRepo: '059948106103.dkr.ecr.us-east-1.amazonaws.com/kubernets/boardgame'
  imageTag: 'latest'

stages:
- stage: BuildAndPush
  displayName: "Build and Push Docker Image to ECR"
  jobs:
  - job: Build
    steps:
    - checkout: self

  
    - task: JavaToolInstaller@0
      inputs:
        versionSpec: '21'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'


    - task: Maven@3
      displayName: "Build JAR with Maven"
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'package'
        publishJUnitResults: false


    - script: |
        for jar in target/*.jar; do
          echo "Deploying $jar to Nexus..."
          mvn deploy:deploy-file \
            -DgroupId=com.example \
            -DartifactId=$(basename "$jar" .jar) \
            -Dversion=1.0.0 \
            -Dpackaging=jar \
            -Dfile="$jar" \
            -DrepositoryId=nexus \
            -Durl=$(NEXUS_URL) \
            -DrepositoryLayout=default \
            -DgeneratePom=true \
            -Dusername=$(NEXUS_USER) \
            -Dpassword=$(NEXUS_PASSWORD)
        done
      displayName: 'Upload JARs to Nexus'

    - task: SonarCloudPrepare@3
      inputs:
        SonarQube: 'SonarcubeAcess'
        organization: 'devopspracticeitt'
        scannerMode: 'cli'
        configMode: 'manual'
        cliProjectKey: 'devopspracticeitt'
        cliProjectName: 'DevOpsPracticeITT_Kubernets_Assignment'
        cliSources: '.'

    - task: SonarCloudAnalyze@3
      inputs:
        jdkversion: 'JAVA_HOME_21_X64'

    - task: SonarCloudPublish@3
      inputs:
        pollingTimeoutSec: '300'


    - task: AWSShellScript@1
      displayName: "Login to Amazon ECR"
      inputs:
        awsCredentials: 'aws-eks-connection'  
        regionName: $(awsRegion)
        scriptType: 'inline'
        inlineScript: |
          aws ecr get-login-password --region $(awsRegion) | docker login --username AWS --password-stdin $(ecrRepo)


    - script: |
        docker build -t $(ecrRepo):$(imageTag) .
      displayName: "Build Docker Image"

    - script: |
        docker push $(ecrRepo):$(imageTag)
      displayName: "Push Docker Image to ECR"

- stage: Deploy
  displayName: "Deploy to EKS with kubectl"
  dependsOn: BuildAndPush
  jobs:
  - job: Deploy
    steps:
    - task: AWSShellScript@1
      displayName: "Configure kubeconfig and deploy"
      inputs:
        awsCredentials: 'aws-eks-connection' 
        regionName: $(awsRegion)
        scriptType: 'inline'
        inlineScript: |
          aws eks update-kubeconfig --region $(awsRegion) --name $(clusterName)
          export KUBECONFIG=$HOME/.kube/config
          kubectl get nodes
          kubectl apply -f deployment-service.yaml

